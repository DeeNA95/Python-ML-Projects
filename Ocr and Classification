{"metadata":{"colab":{"name":"Welcome to DataCamp Workspaces.ipynb","provenance":[]},"editor":"DataLab","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9408368,"sourceType":"datasetVersion","datasetId":5712647}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ! pip install torchvision\n# %pip install torch","metadata":{"executionCancelledAt":null,"executionTime":2973,"lastExecutedAt":1726452106110,"lastExecutedByKernel":"070f5dfb-4aad-40ef-bf6b-8eff8e752576","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"! pip install torchvision","outputsMetadata":{"0":{"height":616,"type":"stream"}},"execution":{"iopub.status.busy":"2024-09-16T02:38:38.331409Z","iopub.execute_input":"2024-09-16T02:38:38.331709Z","iopub.status.idle":"2024-09-16T02:39:04.643302Z","shell.execute_reply.started":"2024-09-16T02:38:38.331677Z","shell.execute_reply":"2024-09-16T02:39:04.642174Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: torchvision in /opt/conda/lib/python3.10/site-packages (0.19.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torchvision) (1.26.4)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from torchvision) (2.4.0)\nRequirement already satisfied: pillow!=8.3.*,>=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision) (9.5.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->torchvision) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch->torchvision) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->torchvision) (1.13.2)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->torchvision) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->torchvision) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch->torchvision) (2024.6.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->torchvision) (2.1.5)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->torchvision) (1.3.0)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.2)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"#utilities\nimport torch\nfrom torch.utils.data import Dataset\nimport random, string\nfrom PIL import ImageFont, Image, ImageDraw\nfrom torchvision.transforms import ToTensor\n\nclass ProjectDataset(Dataset):\n    def __init__(self, num_samples=100):\n        self.num_samples = num_samples\n        self.data = []\n        self.labels = []\n        self.label_mapping = {'primary_id': 0, 'secondary_id': 1}  \n        self.type_mapping = {'home': 0, 'life': 1, 'auto': 2, 'health': 3, 'other':4}  \n        self.generate_data()\n\n    def generate_data(self):\n        for _ in range(self.num_samples):\n            text_type = random.choice(['home', 'life', 'auto', 'health', 'other'])\n            text_type_label = random.choice(['primary_id', 'secondary_id'])\n            text = self.generate_random_string()\n            image = self.text_to_image(text)\n            type_vector = self.text_type_to_vector(text_type)\n            label_index = self.label_mapping[text_type_label]  \n            self.data.append((ToTensor()(image), type_vector))\n            self.labels.append(label_index)  \n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        return self.data[idx], self.labels[idx]\n\n    @staticmethod\n    def generate_random_string(length=5):\n        return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n\n    @staticmethod\n    def text_type_to_vector(text_type):\n        types = ['home', 'life', 'auto', 'health', 'other']\n        vector = [0] * len(types)\n        vector[types.index(text_type)] = 1\n        return torch.tensor(vector, dtype=torch.float)\n\n    @staticmethod\n    def text_to_image(text):\n        font = ImageFont.load_default()\n        size = font.getbbox(text)[2:]\n        image = Image.new('L', size, \"white\")\n        draw = ImageDraw.Draw(image)\n        draw.text((0, 0), text, fill=\"black\", font=font)\n        return image.resize((64, 64))  ","metadata":{"execution":{"iopub.status.busy":"2024-09-16T02:39:04.645693Z","iopub.execute_input":"2024-09-16T02:39:04.646023Z","iopub.status.idle":"2024-09-16T02:39:04.660688Z","shell.execute_reply.started":"2024-09-16T02:39:04.645984Z","shell.execute_reply":"2024-09-16T02:39:04.659753Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle \nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nimport torch.optim as optim\n\n# Load the data\ndataset = pickle.load(open('/kaggle/input/ocr-insurance/ocr_insurance_dataset.pkl', 'rb'))\n\n# Define a function to visualize codes with their corresponding types and labels \ndef show_dataset_images(dataset, num_images=5):\n    fig, axes = plt.subplots(1, min(num_images, len(dataset)), figsize=(20, 4))\n    for ax, idx in zip(axes, np.random.choice(len(dataset), min(num_images, len(dataset)), False)):\n        img, lbl = dataset[idx]\n        ax.imshow((img[0].numpy() * 255).astype(np.uint8).reshape(64,64), cmap='gray'), ax.axis('off')\n        ax.set_title(f\"Type: {list(dataset.type_mapping.keys())[img[1].tolist().index(1)]}\\nLabel: {list(dataset.label_mapping.keys())[list(dataset.label_mapping.values()).index(lbl)]}\")\n    plt.show()\n\n# Inspect 5 codes images from the dataset\nshow_dataset_images(dataset)\n","metadata":{"executionCancelledAt":null,"executionTime":605,"lastExecutedAt":1726452106716,"lastExecutedByKernel":"070f5dfb-4aad-40ef-bf6b-8eff8e752576","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom project_utils import ProjectDataset\nimport pickle \nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nimport torch.optim as optim\n\n# Load the data\ndataset = pickle.load(open('ocr_insurance_dataset.pkl', 'rb'))\n\n# Define a function to visualize codes with their corresponding types and labels \ndef show_dataset_images(dataset, num_images=5):\n    fig, axes = plt.subplots(1, min(num_images, len(dataset)), figsize=(20, 4))\n    for ax, idx in zip(axes, np.random.choice(len(dataset), min(num_images, len(dataset)), False)):\n        img, lbl = dataset[idx]\n        ax.imshow((img[0].numpy() * 255).astype(np.uint8).reshape(64,64), cmap='gray'), ax.axis('off')\n        ax.set_title(f\"Type: {list(dataset.type_mapping.keys())[img[1].tolist().index(1)]}\\nLabel: {list(dataset.label_mapping.keys())[list(dataset.label_mapping.values()).index(lbl)]}\")\n    plt.show()\n\n# Inspect 5 codes images from the dataset\nshow_dataset_images(dataset)","execution":{"iopub.status.busy":"2024-09-16T02:39:04.661795Z","iopub.execute_input":"2024-09-16T02:39:04.662156Z","iopub.status.idle":"2024-09-16T02:39:05.214232Z","shell.execute_reply.started":"2024-09-16T02:39:04.662115Z","shell.execute_reply":"2024-09-16T02:39:05.213323Z"},"trusted":true},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x400 with 5 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_loader = DataLoader(\n    dataset,\n    batch_size=1,\n    shuffle=True\n)\n\n","metadata":{"collapsed":false,"executionCancelledAt":null,"executionTime":53,"jupyter":{"outputs_hidden":false,"source_hidden":false},"lastExecutedAt":1726452106769,"lastExecutedByKernel":"070f5dfb-4aad-40ef-bf6b-8eff8e752576","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"train_loader = DataLoader(\n    dataset,\n    batch_size=1,\n    shuffle=True\n)\n(image,kind), label = next(iter(train_loader))\n\n# print(image[0], kind[0], label[0])\n# print(type(image[0]))\n# first_image = image[0]\n# print(first_image.shape)\n# first_image = first_image.squeeze().unsqueeze(-1)\n# print(first_image.shape)\n# plt.imshow(first_image, cmap='gray')\n# plt.show()","outputsMetadata":{"0":{"height":332,"type":"stream"}},"execution":{"iopub.status.busy":"2024-09-16T02:39:05.215403Z","iopub.execute_input":"2024-09-16T02:39:05.215697Z","iopub.status.idle":"2024-09-16T02:39:05.220425Z","shell.execute_reply.started":"2024-09-16T02:39:05.215664Z","shell.execute_reply":"2024-09-16T02:39:05.219555Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"class OCRModel(nn.Module):\n    def __init__(self, num_classes ):\n        super().__init__()\n        self.image_layer = nn.Sequential(\n            nn.Conv2d(1,16, kernel_size=3, padding=1),\n            nn.MaxPool2d(2),\n            nn.ELU(),\n            nn.Flatten(),\n            nn.Linear(16*32*32, 64) # 16because of conv3d output, 32x32 becasue maxpool2d halved dimension size 64\n        )\n        self.kind_layer = nn.Sequential(\n            nn.Linear(5, 16),\n            nn.ReLU()\n        )\n        self.classifier = nn.Sequential(\n            nn.Linear(64+16,num_classes)\n        )\n    def forward(self, x_image, x_kind):\n        x_image = self.image_layer(x_image)\n        x_kind = self.kind_layer(x_kind)\n        output = self.classifier(torch.cat((x_image,x_kind), dim=1))\n        return output\n        ","metadata":{"executionCancelledAt":null,"executionTime":51,"lastExecutedAt":1726452106821,"lastExecutedByKernel":"070f5dfb-4aad-40ef-bf6b-8eff8e752576","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"class OCRModel(nn.Module):\n    def __init__(self, num_classes ):\n        super().__init__()\n        self.image_layer = nn.Sequential(\n            nn.Conv2d(1,16, kernel_size=3, padding=1),\n            nn.MaxPool2d(2),\n            nn.ELU(),\n            nn.Flatten(),\n            nn.Linear(16*32*32, 64) # 16because of conv3d output, 32x32 becasue maxpool2d halved dimension size 64\n        )\n        self.kind_layer = nn.Sequential(\n            nn.Linear(5, 16),\n            nn.ReLU()\n        )\n        self.classifier = nn.Sequential(\n            nn.Linear(64+16,num_classes)\n        )\n    def forward(self, x_image, x_kind):\n        x_image = self.image_layer(x_image)\n        x_kind = self.kind_layer(x_kind)\n        output = self.classifier(torch.cat((x_image,x_kind), dim=1))\n        return output\n        ","execution":{"iopub.status.busy":"2024-09-16T02:39:05.222313Z","iopub.execute_input":"2024-09-16T02:39:05.222602Z","iopub.status.idle":"2024-09-16T02:39:05.231206Z","shell.execute_reply.started":"2024-09-16T02:39:05.222572Z","shell.execute_reply":"2024-09-16T02:39:05.230308Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nmodel = OCRModel(num_classes=2).to('cuda')\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\n\nfor epoch in range(50):\n    for (image,kind), label in train_loader:\n        optimizer.zero_grad()\n        output = model(image.to('cuda'),kind.to('cuda'))\n        loss = criterion(output, label.to('cuda'))\n        loss.backward()\n        optimizer.step()","metadata":{"executionCancelledAt":null,"executionTime":null,"lastExecutedAt":null,"lastExecutedByKernel":null,"lastScheduledRunId":null,"lastSuccessfullyExecutedCode":null,"execution":{"iopub.status.busy":"2024-09-16T02:39:05.232272Z","iopub.execute_input":"2024-09-16T02:39:05.232586Z","iopub.status.idle":"2024-09-16T02:39:15.254999Z","shell.execute_reply.started":"2024-09-16T02:39:05.232554Z","shell.execute_reply":"2024-09-16T02:39:15.254161Z"},"trusted":true},"execution_count":6,"outputs":[]}]}